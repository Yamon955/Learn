// Code generated by trpc-go/trpc-cmdline v1.0.9. DO NOT EDIT.
// source: caculator.proto

package caculator

import (
	"context"
	"errors"
	"fmt"

	_ "trpc.group/trpc-go/trpc-go"
	"trpc.group/trpc-go/trpc-go/client"
	"trpc.group/trpc-go/trpc-go/codec"
	_ "trpc.group/trpc-go/trpc-go/http"
	"trpc.group/trpc-go/trpc-go/server"
)

// START ======================================= Server Service Definition ======================================= START

// CaculatorService defines service.
type CaculatorService interface {
	Caculate(ctx context.Context, req *CaculateReq) (*CaculateRsp, error)
}

func CaculatorService_Caculate_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &CaculateReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(CaculatorService).Caculate(ctx, reqbody.(*CaculateReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

// CaculatorServer_ServiceDesc descriptor for server.RegisterService.
var CaculatorServer_ServiceDesc = server.ServiceDesc{
	ServiceName: "trpc.test.caculator.Caculator",
	HandlerType: ((*CaculatorService)(nil)),
	Methods: []server.Method{
		{
			Name: "/trpc.test.caculator.Caculator/Caculate",
			Func: CaculatorService_Caculate_Handler,
		},
	},
}

// RegisterCaculatorService registers service.
func RegisterCaculatorService(s server.Service, svr CaculatorService) {
	if err := s.Register(&CaculatorServer_ServiceDesc, svr); err != nil {
		panic(fmt.Sprintf("Caculator register error:%v", err))
	}
}

// START --------------------------------- Default Unimplemented Server Service --------------------------------- START

type UnimplementedCaculator struct{}

func (s *UnimplementedCaculator) Caculate(ctx context.Context, req *CaculateReq) (*CaculateRsp, error) {
	return nil, errors.New("rpc Caculate of service Caculator is not implemented")
}

// END --------------------------------- Default Unimplemented Server Service --------------------------------- END

// END ======================================= Server Service Definition ======================================= END

// START ======================================= Client Service Definition ======================================= START

// CaculatorClientProxy defines service client proxy
type CaculatorClientProxy interface {
	Caculate(ctx context.Context, req *CaculateReq, opts ...client.Option) (rsp *CaculateRsp, err error)
}

type CaculatorClientProxyImpl struct {
	client client.Client
	opts   []client.Option
}

var NewCaculatorClientProxy = func(opts ...client.Option) CaculatorClientProxy {
	return &CaculatorClientProxyImpl{client: client.DefaultClient, opts: opts}
}

func (c *CaculatorClientProxyImpl) Caculate(ctx context.Context, req *CaculateReq, opts ...client.Option) (*CaculateRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/trpc.test.caculator.Caculator/Caculate")
	msg.WithCalleeServiceName(CaculatorServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("test")
	msg.WithCalleeServer("caculator")
	msg.WithCalleeService("Caculator")
	msg.WithCalleeMethod("Caculate")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &CaculateRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

// END ======================================= Client Service Definition ======================================= END
